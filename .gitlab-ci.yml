stages:
 - test
 - build
 - deploy

# Image source available on https://github.com/Ninja-Squad/docker-rare
# It contains a JDK 8 and a Chrome browser
# Node, NPM and Yarn are installed by Gradle
image: ninjasquad/docker-rare
 
# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
 GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
 - export GRADLE_USER_HOME=`pwd`/.gradle

test-backend:
 stage: test
 # the backend tests need an elasticsearch instance
 services:
   # even if that would be ideal
   # we can't just launch the service with just elasticsearch:6.3.1
   # because we need to pass some variables, but they are passed to _all_ containers
   # so they fail the start of other docker images like ninjasquad/docker-rare
   # the only solution is to override the entrypoint of the service and pass the arguments manually
   - name: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
     alias: elasticsearch
     # discovery.type=single-node
     # single-node is necessary to start in development mode
     # so there will be no bootstrap checks that would fail on CI
     # especially the error regarding
     # `max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]`
     # cluster.name=es-rare
     # the cluster name used in tests
     command: ["bin/elasticsearch", "-Ediscovery.type=single-node", "-Ecluster.name=es-rare"]
 script: 
   - ./gradlew :backend:test
 cache:
   key: "$CI_COMMIT_REF_NAME"
   # policy: pull
   paths:
     - build
     - buildSrc
     - .gradle

test-frontend:
 stage: test
 script: 
   - ./gradlew :frontend:test
 cache:
   key: "$CI_COMMIT_REF_NAME"
   # policy: pull
   paths:
     - build
     - buildSrc
     - .gradle
     - frontend/.gradle/
     - frontend/node_modules/

.build-app: &build_app # hidden job which serves as a template for 2 following jobs below. See https://docs.gitlab.com/ee/ci/yaml/#anchors
  stage: build
  script: 
    # tests already executed at previous stage, skipping them now
    - ./gradlew assemble -x test -Papp=$APP_NAME
  artifacts:
    paths:
      - backend/build/libs/$APP_NAME.jar
    expire_in: 5 mins # atm, only keep for deploy stage
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: pull
    paths:
      - build
      - buildSrc
      - .gradle
      - frontend/.gradle/
      - frontend/node_modules/

build-rare:
  # stage: build
  variables:
    APP_NAME: $RARE_APP_NAME
  <<: *build_app           # Merge the contents of the 'build_app' alias

build-wheatis:
  # stage: build
  variables:
    APP_NAME: $WHEATIS_APP_NAME
  <<: *build_app           # Merge the contents of the 'build_app' alias

.deploy-to-vm: &deploy_to_vm # hidedn job which serves as template for 2 executed jobs below. See https://docs.gitlab.com/ee/ci/yaml/#anchors
 stage: deploy
 script:
   - eval $(ssh-agent -s)
   - ssh-add <(echo "$SSH_PRIVATE_KEY")
   - "scp -o StrictHostKeyChecking=no ./backend/build/libs/$APP_NAME.jar root@${BETA_SERVER_IP}:/opt/$APP_NAME/"
   # copying data files for later indexing
   - "ssh -o StrictHostKeyChecking=no root@${BETA_SERVER_IP} \"rm -rf /tmp/$APP_NAME-$ENV/resources ; mkdir -p /tmp/$APP_NAME-$ENV/resources\""
   - "scp -o StrictHostKeyChecking=no ./data/$APP_NAME/*gz root@${BETA_SERVER_IP}:/tmp/$APP_NAME-$ENV/resources/"
   - "ssh -o StrictHostKeyChecking=no root@${BETA_SERVER_IP} \"gunzip -rv /tmp/$APP_NAME-$ENV/resources\""
   # below label should be remove before merge!
   - "ssh -o StrictHostKeyChecking=no root@${BETA_SERVER_IP} \"service $APP_NAME restart --spring.profiles.active=$ENV,$APP_NAME-app --spring.cloud.config.label='chore(_)test-custom-config'\""
   - "sleep 10"
   - "apt-get update -qq && apt-get install -qqy curl"
   - "curl -s -XDELETE ${BETA_SERVER_IP}:9200/$APP_NAME-$ENV-* ; echo"
#   - "while true ; do curl -s ${BETA_SERVER_IP}:8080/$APP_NAME/actuator/health" # should find a better way to wait for embeded tomcat startup
   - "./scripts/createIndexAndAliases4CI.sh ${BETA_SERVER_IP} $APP_NAME $ENV  ; sleep 2 ; echo"
   - "./scripts/harvestCI.sh ${BETA_SERVER_IP} $APP_PORT $APP_NAME $ENV; echo"
   - eval $(ssh-agent -k)
   - "echo \"Deploy and index done. Application should be available at: http://${BETA_SERVER_IP}:$APP_PORT/$APP_NAME \""
 environment: # take care that some variables cannot be expanded according to where they are defined. Info: https://forgemia.inra.fr/help/ci/variables/where_variables_can_be_used.md
   name: $ENV-$APP_NAME

deploy-to-vm-beta-rare:
 # stage: deploy
 variables:
  ENV: beta
  APP_NAME: rare
  APP_PORT: $BETA_RARE_PORT
 <<: *deploy_to_vm           # Merge the contents of the 'deploy_to_vm' alias
 # environment: # take care that some variables cannot be expanded according to where they are defined. Info: https://forgemia.inra.fr/help/ci/variables/where_variables_can_be_used.md
 #   name: beta-rare

deploy-to-vm-beta-wheatis:
 # stage: deploy
 variables:
  ENV: beta
  APP_NAME: wheatis
  APP_PORT: $BETA_WHEATIS_PORT
 <<: *deploy_to_vm           # Merge the contents of the 'deploy_to_vm' alias
 # environment: # take care that some variables cannot be expanded according to where they are defined. Info: https://forgemia.inra.fr/help/ci/variables/where_variables_can_be_used.md
 #   name: $ENV-$APP_NAME
