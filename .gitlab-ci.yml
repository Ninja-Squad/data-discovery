---
stages:
 - pre-build
 - test
 - build
 - deploy-beta
 - deploy-staging
# - deploy-production

# The image contains a JDK 8 and a Chrome browser
# Node, NPM and Yarn are installed by Gradle
image: circleci/openjdk:8-jdk-browsers

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
 GRADLE_OPTS: "-Dorg.gradle.daemon=false"
 GRADLE_USER_HOME: $CI_PROJECT_DIR/.gradle
 GIT_LFS_SKIP_SMUDGE: "1"
 ELASTIC_VERSION: "7.13.2"
 IMAGE_TAG: $CI_COMMIT_REF_SLUG
 GIT_DEPTH: 0
 DOCKER_OPTS: "--mtu=1450"

build-es-synonyms-docker-image:
 # There are three methods to enable the use of docker build and docker run during jobs; each with their own tradeoffs
 # (more details here: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html)
 # docker-in-docker (dind) approach is used here.
 # https://stackoverflow.com/questions/47280922/role-of-docker-in-docker-dind-service-in-gitlab-ci
 # The runner should be executed in privileged mode.
 # It is recommended to use dind with TLS enabled.
 image: registry.forgemia.inra.fr/urgi-is/docker-rare/docker-git:latest
 stage: pre-build
 services:
  - docker:20.10.6-dind
 script:
  - git lfs pull -I "data/synonyms"
  - cd data/synonyms
  - gzip -fd all_*.txt.gz
  - docker build --build-arg ELASTIC_VERSION=${ELASTIC_VERSION} -t registry.forgemia.inra.fr/urgi-is/data-discovery/elasticsearch-synonyms:${IMAGE_TAG} .
  # only build latest tag on master branch
  - if [ "master" == "${CI_COMMIT_REF_SLUG}" ] ; then docker build --build-arg ELASTIC_VERSION=${ELASTIC_VERSION} -t registry.forgemia.inra.fr/urgi-is/data-discovery/elasticsearch-synonyms:latest . ; fi;
  - docker login registry.forgemia.inra.fr -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_TOKEN
  # TODO: remove the old SHA image before pushing the new one? (https://gitlab.com/gitlab-org/gitlab-foss/issues/25322)
  - docker push registry.forgemia.inra.fr/urgi-is/data-discovery/elasticsearch-synonyms:${IMAGE_TAG}
  # only push latest tag on master branch
  - if [ "master" == "${CI_COMMIT_REF_SLUG}" ] ; then docker push registry.forgemia.inra.fr/urgi-is/data-discovery/elasticsearch-synonyms:latest ; fi;
 only:
  refs:
   - merge_requests
   - master
  changes:
   - data/synonyms/*

build-loader-docker-image:
 image: registry.forgemia.inra.fr/urgi-is/docker-rare/docker-git:latest
 stage: pre-build
 services:
  - docker:20.10.6-dind
 script:
  # build the image
  - docker build -t registry.forgemia.inra.fr/urgi-is/docker-rare/data-discovery-loader:${IMAGE_TAG} .
  # only build latest tag on master branch
  - if [ "master" == "${CI_COMMIT_REF_SLUG}" ] ; then docker build -t registry.forgemia.inra.fr/urgi-is/docker-rare/data-discovery-loader:latest . ; fi;
  # Login before pushing the image
  - docker login registry.forgemia.inra.fr -u $CONTAINER_REGISTRY_USERNAME -p $CONTAINER_REGISTRY_TOKEN
  # push the built image
  - docker push registry.forgemia.inra.fr/urgi-is/docker-rare/data-discovery-loader:${IMAGE_TAG}
  # only push latest tag on master branch
  - if [ "master" == "${CI_COMMIT_REF_SLUG}" ] ; then docker push registry.forgemia.inra.fr/urgi-is/docker-rare/data-discovery-loader:latest ; fi;
 only:
  refs:
   - merge_requests
   - master
  changes:
   - scripts/*
   - backend/src/test/resources/fr/inra/urgi/datadiscovery/dao/*/settings.json
   - backend/src/main/resources/fr/inra/urgi/datadiscovery/domain/*/*.mapping.json
   - backend/src/main/resources/fr/inra/urgi/datadiscovery/domain/suggestions.mapping.jso
   - backend/src/test/resources/fr/inra/urgi/datadiscovery/dao/settings-suggestions.json

deploy-synonyms-to-cluster-openstack:
 stage: pre-build
 tags:
  - openstack
 script:
  - eval $(ssh-agent -s)
  - ssh-add <(echo "${ES_SSH_PRIVATE_KEY}")
  - git lfs pull -I "data/synonyms"
  - for ES_HOST in $ES_HOSTS_OPENSTACK $ES_MASTER_OPENSTACK ; do scp -o StrictHostKeyChecking=no data/synonyms/all_*.gz ${SERVER_USER_OPENSTACK}@${ES_HOST}:/tmp/ 2>/dev/null ; done ;
  - for ES_HOST in $ES_HOSTS_OPENSTACK $ES_MASTER_OPENSTACK ; do ssh -o StrictHostKeyChecking=no ${SERVER_USER_OPENSTACK}@${ES_HOST} "sudo mkdir -p /etc/elasticsearch/analysis/synonyms/ ; gzip -d /tmp/all_*gz ; sudo mv /tmp/all_autophrases.txt /tmp/all_synonyms.txt /etc/elasticsearch/analysis/synonyms/" ; done ;
  - eval $(ssh-agent -k)
 only:
  changes:
   - data/synonyms/all_*
  refs:
   - merge_requests
 except:
  - master

# launch all tests and sonarqube analysis
test-lint-build:
 stage: test
 tags:
  - openstack
 # the backend tests need an elasticsearch instance
 services:
   # even if that would be ideal
   # we can't just launch the service with just elasticsearch:6.3.1
   # because we need to pass some variables, but they are passed to _all_ containers
   # so they fail the start of other docker images like urgi/docker-browsers
   # the only solution is to override the entrypoint of the service and pass the arguments manually
   - name: registry.forgemia.inra.fr/urgi-is/data-discovery/elasticsearch-synonyms:${ELASTIC_VERSION}
    # TODO fix above before merging into master branch
     alias: elasticsearch
     # discovery.type=single-node
     # single-node is necessary to start in development mode
     # so there will be no bootstrap checks that would fail on CI
     # especially the error regarding
     # `max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]`
     command:
      - /bin/sh
      - -c
      - "export PATH=/usr/share/elasticsearch/bin:$PATH ;
         exec chroot --userspec=1000 / elasticsearch -Ediscovery.type=single-node -Ecluster.name=elasticsearch"
 variables:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx1024m -Dorg.gradle.daemon=false"
  ES_JAVA_OPTS: "-Xms2g -Xmx2g"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
 script:
  - ./gradlew --parallel check jacocoTestReport :frontend:lint
  # - ./gradlew assemble -Papp=${APP_NAME}
  - find /tmp/node/*/bin -name node -exec ln -s {} /tmp/node/node \;
  - export PATH="/tmp/node/:$PATH"
  - ./gradlew sonarqube -x test
# cache:
#   #key: "$CI_COMMIT_REF_NAME"
#   key: "${CI_JOB_NAME}"
#   policy: pull-push
#   paths:
#     - .gradle
#     - .sonar/cache
#     - frontend/.gradle/
#     - frontend/node_modules/
 artifacts:
  reports:
   junit:
    - ./backend/build/test-results/test/TEST-*.xml
    - ./frontend/karma-junit-tests-report/TEST*.xml
 only:
  refs:
   - merge_requests
   - master
  changes:
   - backend/src/**/*
   - frontend/**/*
   - .gitlab-ci.yml
 interruptible: true


.build-app: &build_app
# Hidden job which serves as a template for following
# jobs below. See https://docs.gitlab.com/ee/ci/yaml/#anchors
  stage: build
  tags:
   - openstack
  script:
   - ./gradlew assemble -Papp=${APP_NAME}
  artifacts:
   paths:
    - backend/build/libs/${APP_NAME}.jar
   expire_in: 6 months
  cache:
   key: "${CI_COMMIT_REF_NAME}"
   policy: pull-push
   paths:
    - .gradle
    - frontend/.gradle/
    - frontend/node_modules/
  only:
   refs:
    - merge_requests
    - master
   changes:
    - backend/src/**/*
    - backend/build.gradle.kts
    - frontend/**/*
    - build.gradle.kts
    - docker.env
    - .gitlab-ci.yml
  interruptible: true

build-rare:
  variables:
   APP_NAME: ${RARE_APP_NAME}
  <<: *build_app           # Merge the contents of the 'build_app' alias
  when: manual # for speeding up pipelines during Ninja Squad devs

build-brc4env:
  variables:
   APP_NAME: "brc4env"
  <<: *build_app           # Merge the contents of the 'build_app' alias
  when: manual # for speeding up pipelines during Ninja Squad devs

build-wheatis:
  variables:
   APP_NAME: ${WHEATIS_APP_NAME}
  <<: *build_app           # Merge the contents of the 'build_app' alias
  when: manual # for speeding up pipelines during Ninja Squad devs

build-faidare:
  variables:
   APP_NAME: ${FAIDARE_APP_NAME}
  <<: *build_app           # Merge the contents of the 'build_app' alias

#.restart-config-server: &restart_config_server
# stage: build
# script:
#  - eval $(ssh-agent -s)
#  - ssh-add <(echo "${SSH_PRIVATE_KEY}")
#  - ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} 'echo "Successfully connected on $(hostname)"'
#  - ssh ${SERVER_USER}@${SERVER_IP} "sudo systemctl restart bootapp@config-server"
#  - eval $(ssh-agent -k)
# allow_failure: true
# only:
#  refs:
#   - merge_requests
#   - master
# interruptible: true
#
#restart-config-server-openstack:
# tags:
#  - openstack
# variables:
#  SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
#  SERVER_USER: ${SERVER_USER_OPENSTACK}
# <<: *restart_config_server
#

.deploy-to-vm-openstack: &deploy_to_vm_openstack
  tags:
   - openstack
  # Hidden job which serves as template for executed jobs below.
  # See https://docs.gitlab.com/ee/ci/yaml/#anchors
  retry: 2
  script:
   # SSH initialization
   - eval $(ssh-agent -s)
   - ssh-add <(echo "${SSH_PRIVATE_KEY}")
   - ssh -o StrictHostKeyChecking=no ${SERVER_USER}@${SERVER_IP} 'echo "Successfully connected on $(hostname)"'
   # Copy jar to the server
   - scp ./backend/build/libs/${APP_NAME}.jar ${SERVER_USER}@${SERVER_IP}:/tmp/${APP_NAME}-${ENV}.jar
   - ssh ${SERVER_USER}@${SERVER_IP} "sudo mv /tmp/${APP_NAME}-${ENV}.jar /opt/bootapp/${APP_NAME}-${ENV}.jar ; sudo chown -R bootapp:bootapp /opt/bootapp/ ; sudo systemctl restart bootapp@${APP_NAME}-${ENV}"
   - eval $(ssh-agent -k)
   - echo "Deploy and index done. Application should be available at http://${SERVER_IP}:${APP_PORT}/${APP_CONTEXT}"
  only:
   refs:
    - merge_requests
    - master
  interruptible: true

.variables-rare-beta-openstack: &variables-rare-beta-openstack
  variables:
   ENV: beta
   APP_NAME: rare
   APP_PORT: ${BETA_RARE_PORT}
   DATA_DIR: ${APP_NAME}
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}-${ENV}

.variables-rare-staging-openstack: &variables-rare-staging-openstack
  variables:
   ENV: staging
   APP_NAME: rare
   APP_PORT: ${STAGING_RARE_PORT}
   DATA_DIR: ${APP_NAME}
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}-${ENV}

## ALPHA
#.variables-rare-prod-openstack: &variables-rare-prod-openstack
# variables:
#  ENV: prod
#  APP_NAME: rare
#  APP_PORT: ${PROD_RARE_PORT}
#  DATA_DIR: ${APP_NAME}
#  SERVER_IP: ${SERVER_IP_OPENSTACK_PROD}
#  SERVER_USER: ${SERVER_USER_OPENSTACK}
#  ES_HOST: ${ES_DEV_HOST_OPENSTACK}
#  ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_PORT: ${ES_DEV_PORT} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  APP_CONTEXT: ${APP_NAME}
#
.variables-brc4env-beta-openstack: &variables-brc4env-beta-openstack
  variables:
   ENV: beta
   APP_NAME: brc4env
   APP_PORT: ${BETA_BRC4ENV_PORT}
   DATA_DIR: rare
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}

.variables-brc4env-staging-openstack: &variables-brc4env-staging-openstack
  variables:
   ENV: staging
   APP_NAME: brc4env
   APP_PORT: ${STAGING_BRC4ENV_PORT}
   DATA_DIR: rare
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}
#
#.variables-brc4env-prod-openstack: &variables-brc4env-prod-openstack
# variables:
#  ENV: prod
#  APP_NAME: brc4env
#  APP_PORT: ${PROD_BRC4ENV_PORT}
#  DATA_DIR: rare
#  SERVER_IP: ${SERVER_IP_OPENSTACK_PROD}
#  SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
#  ES_HOST: ${ES_DEV_HOST_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_PORT: ${ES_DEV_PORT} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  APP_CONTEXT: ${APP_NAME}
#
.variables-wheatis-beta-openstack: &variables-wheatis-beta-openstack
  variables:
   ENV: beta
   APP_NAME: wheatis
   APP_PORT: ${BETA_WHEATIS_PORT}
   DATA_DIR: ${APP_NAME}
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}-${ENV}

.variables-wheatis-staging-openstack: &variables-wheatis-staging-openstack
  variables:
   ENV: staging
   APP_NAME: wheatis
   APP_PORT: ${STAGING_WHEATIS_PORT}
   DATA_DIR: ${APP_NAME}
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}-${ENV}


## ALPHA
#.variables-wheatis-prod-openstack: &variables-wheatis-prod-openstack
# variables:
#  ENV: prod
#  APP_NAME: wheatis
#  APP_PORT: ${PROD_WHEATIS_PORT}
#  DATA_DIR: ${APP_NAME}
#  SERVER_IP: ${SERVER_IP_OPENSTACK_PROD}
#  SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
#  ES_HOST: ${ES_DEV_HOST_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_PORT: ${ES_PROD_PORT}
#  APP_CONTEXT: ${APP_NAME}

.variables-faidare-beta-openstack: &variables-faidare-beta-openstack
  variables:
   ENV: beta
   APP_NAME: faidare
   APP_PORT: ${BETA_FAIDARE_PORT}
   DATA_DIR: ${APP_NAME}
   SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
   SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
   ES_HOST: ${ES_DEV_HOST_OPENSTACK}
   ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK}
   ES_PORT: ${ES_DEV_PORT}
   APP_CONTEXT: ${APP_NAME}-${ENV}

.variables-faidare-staging-openstack: &variables-faidare-staging-openstack
  variables:
    ENV: staging
    APP_NAME: faidare
    APP_PORT: ${STAGING_FAIDARE_PORT}
    DATA_DIR: ${APP_NAME}
    SERVER_IP: ${SERVER_IP_OPENSTACK_DEV}
    SERVER_USER: ${SERVER_USER_CENTOS_OPENSTACK}
    ES_HOST: ${ES_HOST_OPENSTACK}
    ES_HOSTS: ${ES_HOSTS_OPENSTACK}
    ES_PORT: ${ES_PORT}
    APP_CONTEXT: ${APP_NAME}-${ENV}

## ALPHA
#.variables-faidare-prod-openstack: &variables-faidare-prod-openstack
# variables:
#  ENV: prod
#  APP_NAME: faidare
#  APP_PORT: ${PROD_FAIDARE_PORT}
#  DATA_DIR: ${APP_NAME}
#  SERVER_IP: ${SERVER_IP_OPENSTACK_PROD}
#  SERVER_USER: ${SERVER_USER_OPENSTACK}
#  ES_HOST: ${ES_DEV_HOST_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_HOSTS: ${ES_DEV_HOSTS_OPENSTACK} # TODO: TO BE FIXED WHEN PROD CLUSTER AVAILABLE IN OPENSTACK
#  ES_PORT: ${ES_PROD_PORT}
#  APP_CONTEXT: faidare
#
deploy-rare-to-beta-openstack:
  stage: deploy-beta
  tags:
   - openstack
  <<: *variables-rare-beta-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
  allow_failure: false # mandatory to block the execution of the pipeline
  needs: ["build-rare"]
  when: manual # for speeding up pipelines during Ninja Squad devs

deploy-rare-to-staging-openstack:
  stage: deploy-staging
  tags:
   - openstack
  <<: *variables-rare-staging-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
    - master
  when: manual
  needs: ["build-rare"]

## ALPHA
#deploy-rare-to-prod-openstack:
# stage: deploy-production
# tags:
#  - openstack
# <<: *variables-rare-prod-openstack
# <<: *deploy_to_vm_openstack
# only:
#  changes:
#   - backend/src/**/*
#   - frontend/**/*
#   - .gitlab-ci.yml
#  refs:
#   - master
# when: manual
# allow_failure: false
# needs: ["build-rare"]

deploy-brc4env-to-beta-openstack:
  stage: deploy-beta
  tags:
   - openstack
  <<: *variables-brc4env-beta-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
  allow_failure: false # mandatory to block the execution of the pipeline
  needs: ["build-brc4env"]
  when: manual # for speeding up pipelines during Ninja Squad devs

deploy-brc4env-to-staging-openstack:
  stage: deploy-staging
  tags:
   - openstack
  <<: *variables-brc4env-staging-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
    - master
  when: manual
  needs: ["build-brc4env"]

#deploy-brc4env-to-prod-openstack:
# stage: deploy-production
# tags:
#  - openstack
# <<: *variables-brc4env-prod-openstack
# <<: *deploy_to_vm_openstack
# only:
#  changes:
#   - backend/src/**/*
#   - frontend/**/*
#   - .gitlab-ci.yml
#  refs:
#   - master
# when: manual
# allow_failure: false
# needs: ["build-brc4env"]

deploy-wheatis-to-beta-openstack:
  stage: deploy-beta
  tags:
   - openstack
  <<: *variables-wheatis-beta-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
  allow_failure: false
  needs: ["build-wheatis"]
  when: manual # for speeding up pipelines during Ninja Squad devs

deploy-wheatis-to-staging-openstack:
  stage: deploy-staging
  tags:
   - openstack
  <<: *variables-wheatis-staging-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
    - master
  when: manual
  needs: ["build-wheatis"]

## ALPHA
#deploy-wheatis-to-prod-openstack:
# stage: deploy-production
# tags:
#  - openstack
# <<: *variables-wheatis-prod-openstack
# <<: *deploy_to_vm_openstack
# only:
#  changes:
#   - backend/src/**/*
#   - frontend/**/*
#   - .gitlab-ci.yml
#  refs:
#   - master
# when: manual
# allow_failure: false
# needs: ["build-wheatis"]
#
deploy-faidare-to-beta-openstack:
  stage: deploy-beta
  tags:
   - openstack
  <<: *variables-faidare-beta-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
  allow_failure: false
  needs: ["build-faidare"]
  when: manual # for speeding up pipelines during Ninja Squad devs

deploy-faidare-to-staging-openstack:
  stage: deploy-staging
  tags:
   - openstack
  <<: *variables-faidare-staging-openstack
  <<: *deploy_to_vm_openstack
  only:
   changes:
    - backend/src/**/*
    - frontend/**/*
    - .gitlab-ci.yml
   refs:
    - merge_requests
    - master
  when: manual
  needs: ["build-faidare"]

## ALPHA
#deploy-faidare-to-prod-openstack:
# stage: deploy-production
# tags:
#  - openstack
# <<: *variables-faidare-prod-openstack
# <<: *deploy_to_vm_openstack
# only:
#  changes:
#   - backend/src/**/*
#   - frontend/**/*
#   - .gitlab-ci.yml
#  refs:
#   - master
# when: manual
# allow_failure: false
# needs: ["build-faidare"]
