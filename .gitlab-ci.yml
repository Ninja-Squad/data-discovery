# Image source available on https://github.com/Ninja-Squad/docker-rare
# It contains a JDK 8 and a Chrome browser
# Node, NPM and Yarn are installed by Gradle
image: ninjasquad/docker-rare
 
stages:
 - test
 - deploy

# Disable the Gradle daemon for Continuous Integration servers as correctness
# is usually a priority over speed in CI environments. Using a fresh
# runtime for each build is more reliable since the runtime is completely
# isolated from any previous builds.
variables:
 GRADLE_OPTS: "-Dorg.gradle.daemon=false"

before_script:
 - export GRADLE_USER_HOME=`pwd`/.gradle

test:
 stage: test
 # the backend tests need an elasticsearch instance
 services:
   # even if that would be ideal
   # we can't just launch the service with just elasticsearch:6.3.1
   # because we need to pass some variables, but they are passed to _all_ containers
   # so they fail the start of other docker images like ninjasquad/docker-rare
   # the only solution is to override the entrypoint of the service and pass the arguments manually
   - name: docker.elastic.co/elasticsearch/elasticsearch:6.3.1
     alias: elasticsearch
     # discovery.type=single-node
     # single-node is necessary to start in development mode
     # so there will be no bootstrap checks that would fail on CI
     # especially the error regarding
     # `max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]`
     # cluster.name=es-rare
     # the cluster name used in tests
     command: ["bin/elasticsearch", "-Ediscovery.type=single-node", "-Ecluster.name=es-rare"]
 script: 
   - ./gradlew build
 artifacts:
   paths:
     - backend/build/libs/*.jar
   expire_in: 5 mins
 cache:
   key: "$CI_COMMIT_REF_NAME"
   policy: pull
   paths:
     - build
     - backend/build/libs/*.jar
     - .gradle

deploy-to-vm:
 stage: deploy
# dependencies: 
#   - test
# cache:
#   key: "$CI_COMMIT_REF_NAME"
#   policy: pull
#   paths:
#     - build
#     - backend/build/libs/*.jar
#     - .gradle
 script:
   - eval $(ssh-agent -s)
   - ssh-add <(echo "$SSH_PRIVATE_KEY")
   - "scp -o StrictHostKeyChecking=no ./backend/build/libs/rare.jar root@10.0.0.132:/opt/rare/ "
   - "ssh -o StrictHostKeyChecking=no root@10.0.0.132 'service rare restart'"
   #- "ssh -o StrictHostKeyChecking=no root@10.0.0.132 'java -jar /tmp/rare.jar &'"
   - "sleep 10"
   - apt update && apt install -y curl
   - "curl -XDELETE 10.0.0.132:9200/*"
   - "./scripts/createIndexAndAliases.sh 10.0.0.132"
   - "./scripts/harvestRare.sh 10.0.0.132"
   - "echo \"Deploy and index done. Application should be available at: http://10.0.0.132:8080/rare <a href='http://10.0.0.132:8080/rare' >RARe app</a>.\""

